<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!--
    Vehicle's parameters (remember to enter the model parameters below)
  -->

  <xacro:property name="mass" value="28"/>
  <!-- Center of gravity -->
  <xacro:property name="cog" value="0 0 -0.13"/>
  <!-- Fluid density -->
  <xacro:property name="rho" value="1028"/>

  <!-- Loading vehicle's specific macros -->
  <xacro:include filename="$(find heron_description)/urdf/snippets.xacro"/>
  <xacro:property name="camera_link" value="0.1" /> <!-- Size of square 'camera' box -->

  <material name="gray"><color rgba="0.7 0.7 0.7 1.0"/></material>
  <material name="dark_gray"><color rgba="0.2 0.2 0.2 1.0"/></material>
  <material name="yellow"><color rgba="0.8 0.8 0.0 1.0"/></material>
  <material name="red"><color rgba="1.0 0.0 0.0 1.0"/></material>

  <xacro:macro name="panel" params="namespace side location">


      <!-- location flips the panel. 1 is for the left and -1 is for the right -->
      <joint name="${namespace}base_${side}_joint" type="fixed">
        <origin xyz="0.0 ${location * 0.34495} 0.04959" rpy="0 0 0" />
        <parent link="${namespace}base_link" />
        <child link="${namespace}${side}_panel_link" />
      </joint>
      

      <link name="${namespace}${side}_panel_link">
        <inertial>
          <mass value="0.1" />
          <origin xyz="0.000000000 0.00000000 0.00000000" />
          <inertia ixx="0.01" ixy="0.00" ixz="0.00"
            iyy="0.01" iyz="0.00" izz="0.01" />
        </inertial>

        <visual>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <mesh filename="package://heron_description/meshes/${side}_panel.stl" />
          </geometry>
          <material name="yellow" />
        </visual>
      </link>

      <gazebo reference="${namespace}${side}_panel_link">
        <material>Gazebo/Yellow</material>
      </gazebo>
    </xacro:macro>

  <!-- Vehicle macro -->
  <xacro:macro name="heron_base" params="namespace *gazebo">
            <!-- Rigid body description of the base link -->
      <link name="${namespace}base_link">
        <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->

        <visual>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="package://heron_description/meshes/heron_base.stl" scale="1 1 1" />
          </geometry>
          <material name="dark_gray" />
        </visual>

        <collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="package://heron_description/meshes/heron_collision.stl" scale="1 1 1" />
          </geometry>
        </collision>
      </link>

      <!-- Dummy Link to contain the inertial information for base_link -->
      <link name="${namespace}dummy_link">
        <inertial>
          <mass value="${mass}" />
          <origin xyz="${cog}" rpy="0 0 0"/>
          <inertia ixx="10" ixy="0" iyy = "10" ixz="0" iyz="0" izz="10" />
          <!-- <inertia ixx="0.017474" ixy="-0.000013" ixz="-0.000102"
                                  iyy="0.017781"  iyz="-0.000058"
                                                  izz="0.033235" /> -->

        </inertial>
      </link>

      <joint name="dummy_to_base" type="fixed">
        <parent link="${namespace}base_link" />
        <child link="${namespace}dummy_link" />
      </joint>

    <gazebo reference="${namespace}base_link">
      <selfCollide>false</selfCollide>
      <material>Gazebo/DarkGrey</material>
      <gravity>1</gravity>
    </gazebo>

    <!-- Link of the Stereo Camera - Contains the collision and visual parameters -->
    <link name="${namespace}camera_link">
      <collision>
        <origin xyz="0.1 0 -0.2" rpy="0 0.4 0"/>
        <geometry>
          <box size="${camera_link} ${camera_link} ${camera_link}"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="0.1 0 -0.2" rpy="0 0.4 0"/>
        <geometry>
          <box size="${camera_link} ${camera_link} ${camera_link}"/>
        </geometry>
        <material name="red"/>
      </visual>

      <inertial>
        <mass value="1e-5" />
        <origin xyz="0.1 0 -0.2" rpy="0 0.4 0"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>  

    <!-- Joint between the camera and the base_link (the heron) -->
    <joint name="camera_joint" type="fixed">    
      <origin xyz="0 0 -0.2" rpy="0 0.4 0"/>
      <parent link="${namespace}base_link"/>
      <child link="${namespace}camera_link"/>
    </joint>

    
    <!-- Setup of the camera itself -->
    <gazebo reference="${namespace}camera_link">
      <sensor name="${namespace}camera" type="multicamera">
        <update_rate>20</update_rate>
        <camera name="left">
          <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>400</width>
          <height>400</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>1</near>
          <far>70</far>
        </clip>        
      </camera>
      <camera name="right">
        <pose>0 -0.15 0 0 0 0</pose>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>400</width>
          <height>400</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>1</near>
          <far>70</far>
        </clip>               
      </camera>
        <plugin name="${namespace}cameracontroller" filename="libgazebo_ros_multicamera.so">
          <baseline>0.2</baseline>
          <alwaysOn>true</alwaysOn>
          <updateRate>1.0</updateRate>
          <cameraName>${namespace}camera</cameraName>
          <leftCamera>${namespace}left</leftCamera>
          <rightCamera>${namespace}right</rightCamera>          
          <frameName>${namespace}base_link</frameName>
          <distortionK1>0.00000001</distortionK1>
          <distortionK2>0.00000001</distortionK2>
          <distortionK3>0.00000001</distortionK3>
          <distortionT1>0.00000001</distortionT1>
          <distortionT2>0.00000001</distortionT2>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>

   



    <!-- Set up hydrodynamic plugin given as input parameter -->
    <xacro:insert_block name="gazebo"/>

    <!-- Include the thruster modules -->
    <xacro:include filename="$(find heron_description)/urdf/actuators.xacro"/>

    <!-- Include the sensor modules -->
    <xacro:include filename="$(find heron_description)/urdf/sensors.xacro"/>


    <xacro:panel namespace="$(arg suffix_ns)" side="left" location="1" />
    <xacro:panel namespace="$(arg suffix_ns)" side="right" location="-1" />

    <xacro:include filename="$(find heron_description)/urdf/accessories.urdf.xacro" />

    <!-- Optional custom includes. -->
    <xacro:include filename="$(optenv HERON_URDF_EXTRAS empty.urdf)" />

  </xacro:macro>
</robot>
