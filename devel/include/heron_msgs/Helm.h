// Generated by gencpp from file heron_msgs/Helm.msg
// DO NOT EDIT!


#ifndef HERON_MSGS_MESSAGE_HELM_H
#define HERON_MSGS_MESSAGE_HELM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace heron_msgs
{
template <class ContainerAllocator>
struct Helm_
{
  typedef Helm_<ContainerAllocator> Type;

  Helm_()
    : thrust(0.0)
    , yaw_rate(0.0)  {
    }
  Helm_(const ContainerAllocator& _alloc)
    : thrust(0.0)
    , yaw_rate(0.0)  {
  (void)_alloc;
    }



   typedef float _thrust_type;
  _thrust_type thrust;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;





  typedef boost::shared_ptr< ::heron_msgs::Helm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heron_msgs::Helm_<ContainerAllocator> const> ConstPtr;

}; // struct Helm_

typedef ::heron_msgs::Helm_<std::allocator<void> > Helm;

typedef boost::shared_ptr< ::heron_msgs::Helm > HelmPtr;
typedef boost::shared_ptr< ::heron_msgs::Helm const> HelmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::heron_msgs::Helm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::heron_msgs::Helm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace heron_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'heron_msgs': ['/home/ryan/catkin_ws/src/roboticprojectheron/src/heron/heron_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::heron_msgs::Helm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::heron_msgs::Helm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron_msgs::Helm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::heron_msgs::Helm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron_msgs::Helm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::heron_msgs::Helm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::heron_msgs::Helm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2d59470d537e1bf55bc57a5005f3cd5";
  }

  static const char* value(const ::heron_msgs::Helm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2d59470d537e1bfULL;
  static const uint64_t static_value2 = 0x55bc57a5005f3cd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::heron_msgs::Helm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "heron_msgs/Helm";
  }

  static const char* value(const ::heron_msgs::Helm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::heron_msgs::Helm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Command a percentage amount of total thrust capacity, and an turn rate.\n\
# On a conventional craft, turn rate would map to rudder.\n\
\n\
# Thrust amount ranges from [-1.0..1.0], where 1.0 pushes Heron forward.\n\
float32 thrust\n\
\n\
# Yaw rate specified in radians/sec, where positive values cause Heron\n\
# to turn toward the port deck. The controller will use feedback from the\n\
# IMU's gyroscopes to attempt to match the command rate.\n\
float32 yaw_rate\n\
\n\
";
  }

  static const char* value(const ::heron_msgs::Helm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::heron_msgs::Helm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thrust);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Helm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heron_msgs::Helm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::heron_msgs::Helm_<ContainerAllocator>& v)
  {
    s << indent << "thrust: ";
    Printer<float>::stream(s, indent + "  ", v.thrust);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HERON_MSGS_MESSAGE_HELM_H
